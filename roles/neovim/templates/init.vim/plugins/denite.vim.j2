" This is probably the most useful plugin I've seen. Except for almost all of
" the other ones.
" Unite- I mean, Denite allows for creating user interfaces that have a nifty
" fuzzy search feature. Theses screens can be used for file searching, plugin
" searching, buffer searching and a lot more. But, because I'm not original in
" any way, I just use it to show that 'vim can also have CTRL-P'.
call dein#add('Shougo/denite.nvim')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Denite Mappings:
"  Trying to find the simplest and most useful mappings to act like an IDE or
"  something similar. By the way vim is not an IDE.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The fuzzy finder for files under the current directory, recursively. Also,
" did you know that <C-u> will clear the vim command-line? I didn't back in
" the day. Like... Today.
" Start-insert helps to think that I'm not in vim and can just start typing
" away what occult file I'm searching.
" The original command from the docs had `:!` at the end, just before the
" <CR>, but I removed it because I have no idea what it does. No seriously, I
" must be blind to obvious things because I saw nothing on the docs that
" referred to it in relation to this denite command.
nnoremap <leader>r :<C-u>Denite -default-action=tabopen -start-filter
      \ file/rec<CR>

" List buffers with a simple and fast leader mapping, which will allow for
" easing switching of files. The thing is, this is not as easy as opening a
" ton of windows and forgetting that buffers even exist for common people that
" use IDEs (like me).
nnoremap <leader>b :<C-u>Denite buffer<CR>

" Search the code for a pattern and display on a denite buffer. Pretty sweet if
" I use ag, pretty slow if I stay with grep. This code search is useful
" whenever the tags are not useful, which should be almost never.
nnoremap <leader>f :<C-u>Denite grep:.<CR>

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  call deoplete#custom#buffer_option('auto_complete', v:false)
  imap <silent><buffer> <esc> <Plug>(denite_filter_quit)
endfunction

" Use ag for faster code searching. Faster than grep, at least, and any
" feature that grep has and ag doesn't which should be a problem to me wasn't
" found yet.
let g:Denite_source_grep_command = 'ag'

" The default options to pass to ag for denite search.
" --vimgrep will make the output like... vimgrep. And it will stop the
"  annoying "you've no idea what you're doing" error from denite.
" --hidden will allow ag to search on hidden files, like this one.
let g:Denite_source_grep_default_opts = '--vimgrep --hidden'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END Denite Mappings:
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
