---
- hosts: burn-e
  remote_user: ubuntu
  become: yes
  tasks:
    - include_vars: file=vars.yml
    - name: Upgrade all packages to the last version
      apt:
        name: "*"
        state: latest
        update_cache: yes
        cache_valid_time: 3600
    - name: Configure static IP
      copy:
        dest: /etc/netplan/01-netcfg.yaml
        content: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              eth0:
                dhcp4: no
                dhcp6: no
              wlan0:
                dhcp4: no
                dhcp6: no
                optional: true
            bridges:
              br0:
                interfaces: [eth0, wlan0]
                addresses: [192.168.0.5/24]
                gateway4: 192.168.0.1
                nameservers:
                  addresses: [1.1.1.1,1.0.0.1]
      register: network_conf
    - name: Apply network changes
      shell: netplan apply
      when: network_conf.changed
    - name: Install samba
      apt: name=samba
    - name: Create Axiom directory
      file: path=/media/Axiom state=directory mode='0777'
    - name: Configure samba
      copy: src=files/smb.conf dest=/etc/samba/smb.conf
      register: samba_conf
    - name: Restart samba
      systemd: name=smbd state=restarted
      when: samba_conf.changed
    - name: Set samba user password
      shell: "((echo {{ sambapass }}; echo {{ sambapass }}) | smbpasswd -s -a {{ ansible_user }}) && touch /home/{{ ansible_user }}/.sambapass_set"
      args:
        creates: "/home/{{ ansible_user }}/.sambapass_set"
    - include_vars: file=../roles/ssh/vars/private_key.yml
    - name: Allow my own pubkey to SSH
      lineinfile:
        path: "/home/{{ ansible_user }}/.ssh/authorized_keys"
        regexp: 'manzo'
        line: "{{ private_key['~/.ssh/id_rsa.pub']['content'] }}"
    - name: Configure mounting of RAID disks
      mount:
        path: /media/Axiom
        src: UUID=0e528bbc-c862-481b-859a-6695af0944dd
        fstype: btrfs
        opts: 'defaults'
        state: present
    - name: Trust Plex Media Server repository key
      apt_key: url=https://downloads.plex.tv/plex-keys/PlexSign.key
    - name: Add Plex Media Server repository
      apt_repository: repo='deb https://downloads.plex.tv/repo/deb public main'
    - name: Install Plex Media Server
      apt: name=plexmediaserver
    - name: Set timezone to America/Sao_Paulo
      timezone:
        name: America/Sao_Paulo
    - name: Install Transmission Daemon
      apt: name=transmission-daemon
    - name: Stop Transmission Daemon
      systemd: name=transmission-daemon state=stopped
    - name: Configure Transmission Daemon
      copy: src=files/settings.json dest=/var/lib/transmission-daemon/info/settings.json
    - name: Start Transmission Daemon
      systemd: name=transmission-daemon state=started
    - name: Trust Grafana repository key
      apt_key: url=https://packages.grafana.com/gpg.key
    - name: Add Grafana repository
      apt_repository: repo='deb https://packages.grafana.com/oss/deb stable main'
    - name: Install Grafana
      apt: name=grafana
    - name: Start Grafana
      systemd: name=grafana-server state=started enabled=yes daemon-reload=yes
    - name: Install python
      apt: name=python3
    - name: Install python pip
      apt: name=python3-pip
    - name: Install ISM Python dependencies
      pip:
        name:
          - speedtest-cli
          - psycopg2
    - name: Install PostgreSQL
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
    - name: Install ACL
      apt: name=acl
    - name: Create ISM PostgreSQL user
      postgresql_user:
        name: internet_speed_monitor
        password: internet_speed_monitor
        role_attr_flags: LOGIN,NOSUPERUSER,NOCREATEDB,NOCREATEROLE
      become_user: postgres
    - name: Create ISM PostgreSQL database
      postgresql_db:
        name: internet_speed_monitor
        owner: internet_speed_monitor
      become_user: postgres
    - name: Create ISM PostgreSQL table
      postgresql_table:
        name: measurements
        db: internet_speed_monitor
        owner: internet_speed_monitor
        columns:
          - id bigserial primary key
          - measured_at timestamp without time zone
          - down_speed double precision
          - up_speed double precision
      become_user: postgres
    - name: Copy ISM script to server
      copy: src=files/measure_internet_speed dest=/usr/local/bin/measure_internet_speed mode=755
    - name: Schedule periodic measurements for ISM
      cron:
        name: Periodic measurements for ISM
        minute: 0
        hour: "*/6"
        job: "measure_internet_speed"
    - name: Install Grafana backup tool
      pip: name=grafana-backup
    - name: Configure Grafana backup tool
      template: src=grafana-backup.json.j2 dest=~/.grafana-backup.json
    - name: Copy Grafana backup to server
      copy: src=files/grafana-backup.tar.gz dest=~/grafana_backup/grafana-backup.tar.gz
      register: grafana_backup_file
    - name: Restore Grafana backup
      command: grafana-backup restore ~/grafana_backup/grafana-backup.tar.gz
      when: grafana_backup_file.changed
    - name: Install Prometheus
      apt:
        pkg:
          - prometheus
          - prometheus-node-exporter
